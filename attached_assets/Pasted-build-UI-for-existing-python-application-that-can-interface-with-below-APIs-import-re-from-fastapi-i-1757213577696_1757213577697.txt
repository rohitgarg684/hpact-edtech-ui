build UI for existing python application that can interface with below APIs import re from fastapi import APIRouter, HTTPException from pydantic import BaseModel, EmailStr, Field, field_validator from applicationdb.application_db_repository import ApplicationDBRepository class RegisterRequest(BaseModel): username: EmailStr = Field(..., description="User's email address (used as username)") first_name: str = Field(..., min_length=1, max_length=50, description="User's first name") last_name: str = Field(..., min_length=1, max_length=50, description="User's last name") password: str = Field(..., min_length=8, description="Password (must meet complexity requirements)") user_type: str = Field(..., description="Type of user") def validate_password_strength(self): value = self.password if len(value) < 8: raise ValueError('Password must be at least 8 characters long') if not re.search(r'[A-Z]', value): raise ValueError('Password must contain at least one uppercase letter') if not re.search(r'[a-z]', value): raise ValueError('Password must contain at least one lowercase letter') if not re.search(r'\d', value): raise ValueError('Password must contain at least one digit') if not re.search(r'[!@#$%^&*(),.?":{}|<>]', value): raise ValueError('Password must contain at least one special character') class LoginRequest(BaseModel): username: EmailStr = Field(..., description="User's email address") password: str = Field(..., min_length=8, description="Password") class UserApi: """ Encapsulates login/authentication routes. """ def __init__(self): self.router = APIRouter() self.app_repo = ApplicationDBRepository.get_instance() self._register_routes() def _register_routes(self): @self.router.post("/login") def login(req: LoginRequest): # Check rate limit if self.app_repo.is_rate_limited(req.username): raise HTTPException(status_code=429, detail="Too many login attempts. Try again later.") # Fetch user from DB user = self.app_repo.get_user(req.username) if not user: self.app_repo.record_attempt(req.username) raise HTTPException(status_code=401, detail="Invalid credentials") password_hash = user[1] # Verify password if not self.app_repo.verify_password(req.password, password_hash): self.app_repo.record_attempt(req.username) raise HTTPException(status_code=401, detail="Invalid credentials") # Successful login â†’ create session session_id = self.app_repo.create_session(req.username) return {"session_id": session_id} @self.router.post("/register") def register(req: RegisterRequest): # Check if username/email exists user = self.app_repo.get_user(req.username) if user: raise HTTPException(status_code=400, detail="Username already exists") # Validate Password complexity req.validate_password_strength() # Create user self.app_repo.create_user(req.username, req.first_name, req.last_name, req.password, req.user_type) return {"message": f"User {req.username} registered successfully!"}